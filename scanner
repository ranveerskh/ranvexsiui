<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta name="viewport" content="viewport-fit=cover,width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no">
<title>ranvexsi barcode scanner</title>
<link rel="manifest" href="data:application/manifest+json,{&quot;name&quot;:&quot;ranvexsi barcode scanner&quot;,&quot;short_name&quot;:&quot;RBS&quot;,&quot;start_url&quot;:&quot;.&quot;,&quot;display&quot;:&quot;standalone&quot;,&quot;background_color&quot;:&quot;#0f1220&quot;,&quot;theme_color&quot;:&quot;#5e7bff&quot;}">
<meta name="apple-mobile-web-app-capable" content="yes">
<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
<style>
:root{
  --bg:#0f1220; --card:#171b2e; --ink:#eaf0ff; --muted:#a8b2d1; --line:#262c46; --accent:#5e7bff;
  --safe-top: env(safe-area-inset-top,0px);
  --safe-bottom: env(safe-area-inset-bottom,0px);
}
*{box-sizing:border-box}
html,body{height:100%}
body{
  margin:0;background:var(--bg);color:var(--ink);font-family:system-ui,-apple-system,Segoe UI,Roboto,Inter,Arial,sans-serif;
  -webkit-font-smoothing:antialiased; -moz-osx-font-smoothing:grayscale;
}
header{
  position:sticky;top:0;z-index:10;background:linear-gradient(180deg,#121633,rgba(18,22,51,.7));
  padding: calc(8px + var(--safe-top)) 14px 10px; border-bottom:1px solid var(--line);
  display:flex; align-items:center; gap:10px; justify-content:space-between;
}
h1{font-size:16px;margin:0;font-weight:700;letter-spacing:.2px}
.badge{font-size:11px;color:#cfd7ff;opacity:.8}
.wrap{padding:14px}
.card{
  background:var(--card); border:1px solid var(--line); border-radius:14px; overflow:hidden;
}
.toolbar{display:flex;flex-wrap:wrap;gap:8px;padding:10px;border-bottom:1px solid var(--line);background:#141836}
button{
  appearance:none;border:1px solid transparent;background:var(--accent);color:#fff;
  padding:9px 12px;border-radius:10px;font-weight:600;font-size:14px;cursor:pointer
}
button.ghost{background:transparent;border-color:#2f3761;color:#cbd3ff}
button.warn{background:#b54747}
button:disabled{opacity:.5;pointer-events:none}
.row{display:flex;gap:12px;align-items:center;flex-wrap:wrap}
.input{
  background:#0f1330;border:1px solid #2b3261;border-radius:10px;padding:10px 12px;color:var(--ink);
}
.video-wrap{position:relative;background:#0b0e22}
video{width:100%;height:auto;background:#000}
.scan-frame{
  position:absolute;inset:10% 15%;border:2px solid rgba(94,123,255,.8);border-radius:12px;box-shadow:0 0 0 9999px rgba(0,0,0,.35) inset;
  pointer-events:none
}
.status{padding:10px;font-size:12px;color:#c5ccef;border-top:1px dashed var(--line)}
.table-wrap{max-height:40vh;overflow:auto;border-top:1px solid var(--line)}
table{width:100%;border-collapse:collapse;font-size:14px}
th,td{padding:10px;border-bottom:1px solid var(--line)}
th{text-align:left;color:#cfd6ff;background:#141836;position:sticky;top:0;z-index:1}
td.qty input{width:70px;text-align:center}
footer{height:calc(12px + var(--safe-bottom))}
.kv{display:flex;gap:6px;align-items:center}
.kv code{background:#0f1330;border:1px solid #2b3261;border-radius:6px;padding:3px 6px;color:#cbd3ff}
.small{font-size:12px;color:var(--muted)}
hr.split{border:0;border-top:1px solid var(--line);margin:12px 0}
.notice{padding:10px;color:#e9edff;background:#262f5e;border-left:3px solid var(--accent)}
</style>
</head>
<body>
<header>
  <div>
    <h1>ranvexsi barcode scanner</h1>
    <div class="badge">Scan. Count. Copy. Today only.</div>
  </div>
  <div class="kv small"><span>Today:</span><code id="today"></code></div>
</header>

<div class="wrap">
  <div class="card" id="scannerCard">
    <div class="toolbar">
      <div class="row">
        <button id="startBtn">Start camera</button>
        <button id="stopBtn" class="ghost" disabled>Stop</button>
        <button id="flipBtn" class="ghost" disabled>Flip camera</button>
        <button id="torchBtn" class="ghost" disabled>Toggle torch</button>
      </div>
      <div class="row">
        <input id="manualInput" class="input" placeholder="Enter barcode manually" inputmode="numeric" autocomplete="off">
        <button id="addManualBtn" class="ghost">Add</button>
      </div>
    </div>
    <div class="video-wrap">
      <video id="video" playsinline muted></video>
      <div class="scan-frame"></div>
    </div>
    <div class="status" id="status">Idle. No camera yet.</div>
  </div>

  <div class="card" style="margin-top:12px;">
    <div class="toolbar">
      <button id="copyBtn">Copy for Excel</button>
      <button id="csvBtn" class="ghost">Download CSV</button>
      <button id="clearBtn" class="warn">Clear today</button>
      <span class="small" id="totals" style="margin-left:auto">0 items, 0 scans</span>
    </div>
    <div class="table-wrap">
      <table id="table">
        <thead><tr><th style="width:60%">Barcode</th><th style="width:20%">Qty</th><th style="width:20%">Actions</th></tr></thead>
        <tbody id="tbody"></tbody>
      </table>
    </div>
    <div class="status small">Tip: quantities auto-save. Copy uses tab-separated values that paste cleanly into Excel or Sheets.</div>
  </div>

  <p class="notice small" style="margin-top:12px">
    Uses the built-in BarcodeDetector when available. If your browser is being fussy, it falls back to ZXing. All data is saved locally per day: nothing leaves the device.
  </p>
  <footer></footer>
</div>

<!-- ZXing fallback (loaded but only used if BarcodeDetector is missing) -->
<script src="https://unpkg.com/@zxing/browser@0.1.5/umd/index.min.js"></script>
<script>
(function(){
  const el = id => document.getElementById(id);
  const $today = el('today');
  const $video = el('video');
  const $status = el('status');
  const $tbody = el('tbody');
  const $totals = el('totals');
  const $start = el('startBtn'), $stop = el('stopBtn'), $flip = el('flipBtn'), $torch = el('torchBtn');
  const $manual = el('manualInput'), $addManual = el('addManualBtn');
  const $copy = el('copyBtn'), $csv = el('csvBtn'), $clear = el('clearBtn');

  const todayKey = () => new Date().toISOString().slice(0,10);
  const storeKey = () => 'rbscan:' + todayKey();

  const state = {
    counts: {}, // { code: qty }
    totalScans: 0,
    running: false,
    usingZXing: false,
    currentDeviceId: null,
    stream: null,
    detector: null,
    zxingReader: null,
    scanCooldowns: new Map(), // code -> timestamp
    torchOn: false
  };

  function fmtToday(){
    const d = new Date();
    return d.toLocaleDateString(undefined,{year:'numeric',month:'short',day:'numeric'});
  }
  function load(){
    const raw = localStorage.getItem(storeKey());
    if(raw){
      try {
        const obj = JSON.parse(raw);
        state.counts = obj.counts || {};
        state.totalScans = obj.totalScans || 0;
      } catch { /* sigh */ }
    }
    $today.textContent = fmtToday();
    render();
  }
  function save(){
    localStorage.setItem(storeKey(), JSON.stringify({counts:state.counts,totalScans:state.totalScans}));
  }
  function bump(code, delta=1){
    if(!code) return;
    state.counts[code] = (state.counts[code]||0) + delta;
    if(state.counts[code] <= 0) delete state.counts[code];
    if(delta>0) state.totalScans += delta;
    save(); render();
  }
  function render(){
    const entries = Object.entries(state.counts).sort((a,b)=>a[0].localeCompare(b[0]));
    $tbody.innerHTML = '';
    for(const [code,qty] of entries){
      const tr = document.createElement('tr');
      const tdCode = document.createElement('td');
      tdCode.textContent = code;
      const tdQty = document.createElement('td'); tdQty.className='qty';
      const input = document.createElement('input');
      input.type='number'; input.min='0'; input.value=qty;
      input.addEventListener('change', ()=>{
        const v = Math.max(0, Number(input.value|0));
        const prev = state.counts[code]||0;
        state.counts[code] = v;
        state.totalScans += Math.max(0, v - prev);
        if(v===0) delete state.counts[code];
        save(); render();
      });
      tdQty.appendChild(input);
      const tdAct = document.createElement('td');
      const minus = document.createElement('button'); minus.className='ghost'; minus.textContent='âˆ’1';
      minus.addEventListener('click', ()=>bump(code,-1));
      const del = document.createElement('button'); del.className='warn'; del.style.marginLeft='6px'; del.textContent='Delete';
      del.addEventListener('click', ()=>{ delete state.counts[code]; save(); render(); });
      tdAct.append(minus, del);
      tr.append(tdCode, tdQty, tdAct);
      $tbody.appendChild(tr);
    }
    const totalItems = entries.length;
    const totalQty = entries.reduce((s, [,q])=>s+q,0);
    $totals.textContent = `${totalItems} items, ${totalQty} total`;
  }

  // Copy in Excel-friendly tab-separated format: Code [TAB] Qty [NEWLINE]
  function copyForExcel(){
    const rows = Object.entries(state.counts)
      .sort((a,b)=>a[0].localeCompare(b[0]))
      .map(([c,q])=>`${c}\t${q}`)
      .join('\n');
    navigator.clipboard.writeText(rows || '').then(()=>{
      setStatus('Copied list to clipboard.');
    }).catch(()=>{
      // Fallback: create a hidden textarea
      const ta = document.createElement('textarea');
      ta.value = rows; document.body.appendChild(ta);
      ta.select(); document.execCommand('copy'); ta.remove();
      setStatus('Copied list to clipboard.');
    });
  }
  function downloadCSV(){
    const lines = [['Date','Barcode','Qty']];
    const date = todayKey();
    for(const [c,q] of Object.entries(state.counts).sort((a,b)=>a[0].localeCompare(b[0]))){
      lines.push([date,c,String(q)]);
    }
    const csv = lines.map(r=>r.map(v=>/([",\n])/.test(v)?`"${v.replace(/"/g,'""')}"`:v).join(',')).join('\n');
    const blob = new Blob([csv],{type:'text/csv'});
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url; a.download = `rbscan_${date}.csv`; a.click();
    setTimeout(()=>URL.revokeObjectURL(url), 1500);
  }
  function clearToday(){
    if(confirm('Clear all scans for today?')){
      state.counts = {}; state.totalScans = 0; save(); render();
    }
  }
  function setStatus(msg){
    $status.textContent = msg;
  }

  // Camera helpers
  async function listCameras(){
    const devices = await navigator.mediaDevices.enumerateDevices();
    return devices.filter(d=>d.kind==='videoinput');
  }
  async function startCamera(facingMode='environment', deviceId=null){
    if(state.stream){
      stopCamera();
    }
    const constraints = deviceId ? {video:{deviceId:{exact:deviceId}}}
      : {video:{facingMode}};
    const stream = await navigator.mediaDevices.getUserMedia(constraints);
    state.stream = stream;
    $video.srcObject = stream;
    await $video.play();
    $stop.disabled = false;
    $flip.disabled = (await listCameras()).length < 2;
    // Torch availability check
    const track = stream.getVideoTracks()[0];
    const caps = track.getCapabilities?.() || {};
    $torch.disabled = !('torch' in caps);
    state.torchOn = false;
  }
  function stopCamera(){
    if(state.stream){
      state.stream.getTracks().forEach(t=>t.stop());
      state.stream = null;
    }
    $video.srcObject = null;
    $stop.disabled = true; $flip.disabled = true; $torch.disabled = true;
  }
  function toggleTorch(){
    if(!state.stream) return;
    const track = state.stream.getVideoTracks()[0];
    const caps = track.getCapabilities?.() || {};
    if(!('torch' in caps)) return;
    state.torchOn = !state.torchOn;
    track.applyConstraints({advanced:[{torch: state.torchOn}]});
    setStatus(state.torchOn ? 'Torch on' : 'Torch off');
  }

  // Debounce duplicate rapid scans
  function acceptScan(code){
    const now = Date.now();
    const last = state.scanCooldowns.get(code) || 0;
    if(now - last < 800) return false; // ignore duplicates within 0.8s
    state.scanCooldowns.set(code, now);
    return true;
  }

  // Native BarcodeDetector path
  let rafId = null;
  async function startNativeLoop(){
    if(!state.detector) return;
    state.running = true;
    $start.disabled = true;
    setStatus('Scanning with BarcodeDetectorâ€¦');
    const loop = async ()=>{
      if(!state.running) return;
      try{
        const codes = await state.detector.detect($video);
        if(codes && codes.length){
          for(const c of codes){
            const code = String(c.rawValue || '').trim();
            if(code && acceptScan(code)){
              bump(code,1);
              setStatus(`Scanned: ${code}`);
            }
          }
        }
      }catch(e){ /* ignored */ }
      rafId = requestAnimationFrame(loop);
    };
    loop();
  }
  function stopNativeLoop(){
    state.running = false;
    if(rafId) cancelAnimationFrame(rafId), rafId=null;
    $start.disabled = false;
    setStatus('Stopped.');
  }

  // ZXing fallback path
  async function startZXing(){
    state.usingZXing = true;
    $start.disabled = true;
    const { BrowserMultiFormatReader } = window.ZXingBrowser || window.ZXing;
    state.zxingReader = new BrowserMultiFormatReader();
    await startCamera('environment', state.currentDeviceId);
    setStatus('Scanning with ZXingâ€¦');
    const videoElem = $video;
    const onResult = (result, err, controls) =>{
      if(result && result.getText){
        const code = String(result.getText()).trim();
        if(code && acceptScan(code)){
          bump(code,1);
          setStatus(`Scanned: ${code}`);
        }
      }
      // errors are noisy; we ignore them to keep loop running
    };
    state.zxingReader.decodeFromVideoDevice(state.currentDeviceId, videoElem, onResult);
    $stop.disabled = false;
  }
  function stopZXing(){
    if(state.zxingReader){
      try{ state.zxingReader.reset(); }catch{}
      state.zxingReader = null;
    }
    stopCamera();
    $start.disabled = false;
    setStatus('Stopped.');
  }

  async function start(){
    try{
      // Try native detector first
      const supported = ('BarcodeDetector' in window);
      if(supported){
        const formats = [
          'code_128','code_39','ean_13','ean_8','upc_a','upc_e','itf','codabar','qr_code','pdf417','aztec','data_matrix'
        ].filter(Boolean);
        state.detector = new window.BarcodeDetector({formats});
        await startCamera('environment', state.currentDeviceId);
        await startNativeLoop();
        setStatus('Scanningâ€¦');
      }else{
        await startZXing();
      }
    }catch(err){
      console.error(err);
      setStatus('Failed to start camera. Check permissions.');
      $start.disabled = false;
      stopCamera();
    }
  }
  function stop(){
    if(state.detector){
      stopNativeLoop();
      stopCamera();
    }
    if(state.usingZXing){
      stopZXing();
      state.usingZXing = false;
    }
  }

  async function flipCamera(){
    const cams = await listCameras();
    if(!cams.length) return;
    // rotate through devices
    const idx = cams.findIndex(c=>c.deviceId===state.currentDeviceId);
    const next = cams[(idx+1) % cams.length];
    state.currentDeviceId = next.deviceId;
    // restart scanning with selected device
    const wasZX = state.usingZXing;
    stop();
    if(wasZX || !('BarcodeDetector' in window)){
      await startZXing();
    }else{
      await startCamera('environment', state.currentDeviceId);
      await startNativeLoop();
    }
  }

  // Events
  $start.addEventListener('click', start);
  $stop.addEventListener('click', stop);
  $flip.addEventListener('click', flipCamera);
  $torch.addEventListener('click', toggleTorch);
  $addManual.addEventListener('click', ()=>{
    const v = $manual.value.trim();
    if(!v) return;
    bump(v,1);
    setStatus(`Added manually: ${v}`);
    $manual.value='';
    $manual.focus();
  });
  $manual.addEventListener('keydown', e=>{
    if(e.key==='Enter'){ e.preventDefault(); $addManual.click(); }
  });
  $copy.addEventListener('click', copyForExcel);
  $csv.addEventListener('click', downloadCSV);
  $clear.addEventListener('click', clearToday);

  // Init
  load();

  // iOS quirk: ensure video resumes after visibility changes
  document.addEventListener('visibilitychange', ()=>{
    if(document.visibilityState==='visible' && state.stream && $video.paused){
      $video.play().catch(()=>{});
    }
  });
})();
</script>
</body>
</html>